@using Blazored.LocalStorage
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<div class="navbar navbar-expand @NavMenuCssClass">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Menu @role</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        
        @if (UserIsAdmin)
        {
           
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="UserManagement">
                    <span class="oi oi-person" aria-hidden="true"></span> User Management 
                </NavLink>
            </div>
        }

        @if (UserIsUserManager)
        {
            
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="UserManagement">
                    <span class="oi oi-person" aria-hidden="true"></span> User Management 
                </NavLink>
            </div>
        }

        @if (UserIsUser)
        {
           
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="user">
                    <span class="oi oi-person" aria-hidden="true"></span> User
                </NavLink>
            </div>
        }
    </nav>
</div>

<div class="navbar fixed-bottom align-items-center @NavMenuCssClass">
    <div class="container-fluid justify-content-start">
        <a class="navbar-brand" href="" @onclick="HandleLogoutAsync">Logout</a>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool UserIsAdmin { get; set; }
    private bool UserIsUserManager { get; set; }
    private bool UserIsUser { get; set; }
    private string role = string.Empty;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        if (!string.IsNullOrEmpty(token))
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtToken = tokenHandler.ReadJwtToken(token);

            var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            role = roleClaim?.Value;

            UserIsAdmin = role == "Admin";
            UserIsUserManager = role == "UserManager";
            UserIsUser = role == "User";
        }
    }

    private async Task HandleLogoutAsync()
    {
        await localStorage.RemoveItemAsync("token");
        navigationManager.NavigateTo("/", true);
    }
}
