@page "/TicketManagement"
@using Frontend.Models.Event
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Frontend.Models.Event.regist
@using Frontend.Models.User
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<h3>Registered Events</h3>
@if (participantEvents.Count != 0 )
{
    <table class="table">
        <thead>
        <tr style="background: #e6dbb9">
            <th>Name</th>
            <th>EventDate</th>
            <th>Location</th>
            <th>Organizer</th>
            <th>Description</th>
            <th>Category</th>
            <th>TicketType</th>
            <th>State</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var evt in participantEvents)
        {
            <tr>
                <td>@evt.Event_Name</td>
                <td>@evt.EventInfo.Date_Hour</td>
                <td>@evt.EventInfo.Localization</td>
                <td>@evt.EventInfo.organizer.Name</td>
                <td>@evt.EventInfo.Description</td>
                <td>@evt.EventInfo.Category.Name</td>
                <td>@evt.Ticket_Type_Name</td>
                <td>@evt.State_Name</td>
                <td>
                    @if (evt.State_Name == "Confirmado")
                    {
                        <button class="btn btn-danger" @onclick="() => CancelEvent(evt)">Cancelar</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
} else
{
    <p class="" style="text-align: center; margin-top: 100px; font-size: 20px;">Not registered for any event</p>

@code {
    private List<EventRegistModel> participantEvents;
    private string token;
    private string userEmail;
    private Guid userId;

    protected override async Task OnInitializedAsync()
    {
          
        token = await localStorage.GetItemAsync<string>("token");

    // Decode the token and extract user information
        var tokenHandler = new JwtSecurityTokenHandler();
        var decodedToken = tokenHandler.ReadJwtToken(token);

    // Extract the user email
        userEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

    // Get the user ID based on the email
        userId = await GetUserIdByEmail(userEmail);
        
        await ListParticipantEvents(userId);
        
    }

    private async Task ListParticipantEvents(Guid idUser)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/EventRegist");

        if (response.IsSuccessStatusCode)
        {
            var pEvents = await response.Content.ReadFromJsonAsync<List<EventRegistModel>>();
            participantEvents = pEvents.Where(evt => evt.EventInfo.organizer.ID == idUser).ToList();
           
        }
    }

    private async Task CancelEvent(EventRegistModel evt)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to cancel this event registration?" });

        if (confirm)
        {
            evt.State_Name = "Cancelado";

            var request = new HttpRequestMessage(new HttpMethod("PATCH"), $"http://localhost:5052/api/EventRegist/Cancel/{evt.ID}");
            var response = await httpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Event registration canceled successfully.");
                await ListParticipantEvents();  // Recarregar os eventos ap√≥s o cancelamento
            }
            else
            {
                Console.WriteLine("Failed to cancel the event registration.");
            }
        }
    }
    private async Task<Guid> GetUserIdByEmail(string email)
    {
        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/GetUserByEmail/{email}");

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<UserModel>();
            if (user != null)
            {
                return user.ID;
            }
        }

        return Guid.Empty;
    }
}