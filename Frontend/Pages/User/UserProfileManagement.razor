@page "/user"
@using Frontend.Models.User
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Frontend.Models.Event
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<style>
    .user-details-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #d7d7d7;
        padding: 50px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-left: 120px;
        margin-right: 120px;
    }

    .user-details-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 30px;
        
    }

    .user-detail {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-bottom: 20px;
    }

    .detail-label {
        font-weight: bold;
        margin-right: 10px;
        color: #333;
    }

    .detail-value {
        color: #777;
    }

    .edit-button {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

    .edit-button:hover {
        background-color: #0056b3;
    }
</style>

<h3>Edit User Profile</h3>

@if (users != null)
{
    <div class="user-details-container">
        <h3 class="user-details-title">User Details</h3>
    
        <div class="user-detail">
            <span class="detail-label">Name:</span>
            <span class="detail-value">@users.Name</span>
        </div>
    
        <div class="user-detail">
            <span class="detail-label">Username:</span>
            <span class="detail-value">@users.Username</span>
        </div>
    
        <div class="user-detail">
            <span class="detail-label">Email:</span>
            <span class="detail-value">@users.Email</span>
        </div>
    
        <div class="user-detail">
            <span class="detail-label">Phone:</span>
            <span class="detail-value">@users.Phone</span>
        </div>
    
        <div class="user-detail">
            <span class="detail-label">Password:</span>
            <span class="detail-value" type="password">********</span>
        </div>

    
        <button class="edit-button" @onclick="() => EditUser(users)">Edit</button>
    </div>
    
}
else
{
    <p>Error fetching users.</p>
}
@code {

    private UpdateEventModel newEvent = new();

    private string token;
    private string userEmail;
    private Guid userId;
    private UserModel users;

    protected override async Task OnInitializedAsync() {
        
        token = await localStorage.GetItemAsync<string>("token");

    // Decodificar o token e extrair as informações do utilizador
        var tokenHandler = new JwtSecurityTokenHandler();
        var decodedToken = tokenHandler.ReadJwtToken(token);

    // Extrair o email do utilizador
        userEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

    // Obter o ID do utilizador com base no email
        userId = await GetUserIdByEmail(userEmail);
        await ListProfile(userId);

    }

    private async Task<Guid> GetUserIdByEmail(string email) {
        
        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/GetUserByEmail/{email}");

        if (response.IsSuccessStatusCode) {
            var user = await response.Content.ReadFromJsonAsync<UserModel>();
            if (user != null) {
                return user.ID;
            }
        }

        return Guid.Empty;
    }
    
    
    private async Task ListProfile(Guid user_id)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/{user_id}");

        if (response.IsSuccessStatusCode)
        {
            users = await response.Content.ReadFromJsonAsync<UserModel>();
        }
    }
    
    private void EditUser(UserModel user)
    {
        navigationManager.NavigateTo($"/EditUserProfileManagement/{user.ID}", true);
    }


    
}

