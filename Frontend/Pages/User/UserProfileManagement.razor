@page "/user"
@using Frontend.Models.User
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Frontend.Models.Event
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<style>
    .custom-details {
        margin-bottom: 20px;
    }
    
    .custom-details label {
        font-weight: bold;
    }
    
    .custom-btn {
        background-color: #007bff;
        color: #fff;
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

<h3>Edit User Profile</h3>

@if (users != null)
{
    <div class="custom-details" style="padding-top: 30px">
        <label>Name:</label>
        <div>@users.Name</div>
    </div>
    <div class="custom-details">
        <label>Username:</label>
        <div>@users.Username</div>
    </div>
    <div class="custom-details">
        <label>Email:</label>
        <div>@users.Email</div>
    </div>
    <div class="custom-details">
        <label>Phone:</label>
        <div>@users.Phone</div>
    </div>
    <div class="custom-details">
        <label>Password:</label>
        <div>@users.Password</div>
    </div>
    <button class="btn btn-primary custom-btn" @onclick="() => EditUser(users)">Edit</button>
}
else
{
    <p>Error fetching users.</p>
}


@code {

    private UpdateEventModel newEvent = new();

    private string token;
    private string userEmail;
    private Guid userId;
    private UserModel users;

    protected override async Task OnInitializedAsync() {
        
        token = await localStorage.GetItemAsync<string>("token");

    // Decodificar o token e extrair as informações do utilizador
        var tokenHandler = new JwtSecurityTokenHandler();
        var decodedToken = tokenHandler.ReadJwtToken(token);

    // Extrair o email do utilizador
        userEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

    // Obter o ID do utilizador com base no email
        userId = await GetUserIdByEmail(userEmail);
        await ListProfile(userId);

    }

    private async Task<Guid> GetUserIdByEmail(string email) {
        
        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/GetUserByEmail/{email}");

        if (response.IsSuccessStatusCode) {
            var user = await response.Content.ReadFromJsonAsync<UserModel>();
            if (user != null) {
                return user.ID;
            }
        }

        return Guid.Empty;
    }
    
    
    private async Task ListProfile(Guid user_id)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/{user_id}");

        if (response.IsSuccessStatusCode)
        {
            users = await response.Content.ReadFromJsonAsync<UserModel>();
        }
    }
    
    private void EditUser(UserModel user)
    {
        navigationManager.NavigateTo($"/EditUserProfileManagement/{user.ID}", true);
    }


    
}

