@page "/EventsTicketDetails/{eventId}"
@using Frontend.Models.Event
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Frontend.Models.Event.regist
@using System.Text
@using Frontend.Models.Event.regist
@using Frontend.Models.Event.Ticket
@using Frontend.Models.User
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<h3>EventsTicketDetails</h3>

<div style="background: #f2f2f2; padding: 20px;">
    <div style="text-align: center; margin-bottom: 20px;">
        <h3 style="color: #0a53be; font-size: 24px;">@eventDetails?.Name</h3>
        <p style="color: #666;">@eventDetails?.Date_Hour</p>
    </div>
    <div style="display: flex; flex-direction: column; align-items: center;">
        <div style="background: #fff; padding: 10px; border-radius: 5px; margin-bottom: 10px;">
            <strong>Localization:</strong>
            <p>@eventDetails?.Localization</p>
            <strong>Description:</strong>
            <p> @eventDetails?.Description</p>
            <strong>Capacity:</strong>
            <p> @eventDetails?.Capacity</p>
            <strong>Category:</strong> 
            <p>@eventDetails?.Category?.Name</p>
        </div>
        <div style="background: #0a53be; color: #fff; padding: 10px; border-radius: 5px; margin-bottom: 10px; text-align: center;">
            Organizer Name: @eventDetails?.organizer.Name
        </div>
    </div>
</div>

<div class="form-group">
    <label for="tickettype">Ticket Type:</label>
    <select id="tickettype" class="form-control" @bind="selectedTicketId">
        @foreach (var _ticket in ticket_type)
        {
            <option value="@_ticket.TicketType.ID">@_ticket.TicketType.Name @_ticket.Price €</option>
        }
    </select>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="mt-3">
    <button class="btn btn-danger" @onclick="CancelRegistration">Cancelar</button>
    <button class="btn btn-primary" @onclick="RegisterUserForEvent">Confirmar</button>
</div>

@code {
    private EventModel eventDetails;
    private Guid eventId;
    private string token;
    private Guid selectedTicketId;
    private string userEmail;
    private Guid userId;
    private CreateEventRegistModal newRegist = new();
    private EventTicketModel detailsTicket = new();
    private CreateEventTicketModel newEventTicket = new();
    private List<EventTicketModel>? ticket_type = new();
    private string errorMessage;
    
    [Parameter]
    public string EventId
    {
        get => eventId.ToString();
        set
        {
            if (Guid.TryParse(value, out var parsedId))
            {
                eventId = parsedId;
                LoadEventDetails(eventId);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (eventId != Guid.Empty)
        {   await LoadTicketPrices(eventId);
            if (eventDetails != null)
            {
                await LoadEventDetails(eventId);
             
            }
            else
            {
                errorMessage = "Event details not found.";
            }
        }

        token = await localStorage.GetItemAsync<string>("token");

      
        var tokenHandler = new JwtSecurityTokenHandler();
        var decodedToken = tokenHandler.ReadJwtToken(token);

        
        userEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

        userId = await GetUserIdByEmail(userEmail);

        
    }

    private async Task<Guid> GetUserIdByEmail(string email)
    {
        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/GetUserByEmail/{email}");

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<UserModel>();
            if (user != null)
            {
                return user.ID;
            }
        }

        return Guid.Empty;
    }

    private async Task LoadEventDetails(Guid eventId)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/Event/{eventId}");

        if (response.IsSuccessStatusCode)
        {
            eventDetails = await response.Content.ReadFromJsonAsync<EventModel>();
            
        }
        else
        {
            errorMessage = "Failed to load event details.";
        }
    }

    private async Task LoadTicketPrices(Guid eventId)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (eventId == Guid.Empty)
        {
            errorMessage = "No event ID provided.";
            return;
        }

        var response = await httpClient.GetAsync($"http://localhost:5052/api/EventTicket/GetEventTicketsByEvent/{eventId}");

        if (response.IsSuccessStatusCode)
        {
            var eventTickets = await response.Content.ReadFromJsonAsync<List<EventTicketModel>>();
            ticket_type = eventTickets;
            selectedTicketId = ticket_type.FirstOrDefault()?.TicketType?.ID ?? Guid.Empty;

        }
        else
        {
            errorMessage = "Failed to load ticket prices.";
        }
    }

    private async Task RegisterUserForEvent()
    {
        var stateId = await GetStateIdByName("Confirmado");
        if (stateId != Guid.Empty)
        {
            newRegist = new CreateEventRegistModal()
            {
                Event_ID = eventId,
                Participant_ID = userId,
                State_ID = stateId,
                Ticket_Type_ID = selectedTicketId,
                regist_date = DateTime.Now.ToUniversalTime()
                
            };

            var token = await localStorage.GetItemAsync<string>("token");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/EventRegist", newRegist);

            if (response.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/Events"); // Redireciona para a página eventos
            }
            else
            {
                errorMessage = "Failed to register user for the event.";
            }
        }
        else
        {
            errorMessage = "State ID is null.";
        }
    }

    private async Task<Guid> GetStateIdByName(string stateName)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/RegistState/GetStateIdByName/{stateName}");

        if (response.IsSuccessStatusCode)
        {
            var stateId = await response.Content.ReadFromJsonAsync<Guid>();
            return stateId;
        }

        return Guid.Empty;
    }
    
 
    private void CancelRegistration()
    {
        navigationManager.NavigateTo("/events");
    }
}
