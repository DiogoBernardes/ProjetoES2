@page "/EditUserProfileManagement/{UserId}"
@using Frontend.Models.User
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.Security.Claims
@using Frontend.Models
@using Microsoft.AspNetCore.Components
@using System.IdentityModel.Tokens.Jwt
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<h3>Edit User</h3>


    <form class="form">
        <div class="form-group">
            <label for="name">Name</label>
            <input type="text" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" id="name" @bind="@user.Name">
        </div>
        <div class="form-group">
            <label for="username">Username</label>
            <input type="text" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" id="username" @bind="@user.Username">
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" id="password" @bind="@user.Password">
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" id="email" @bind="@user.Email">
        </div>
        <div class="form-group">
            <label for="phone">Phone</label>
            <input type="phone" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" id="phone" @bind="@user.Phone">
        </div>
        <div class="form-group">
            <label for="role">Role:</label>
            @if (UserIsUserManager)
            {
                <select id="role" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" @bind="user.Role_id">
                    @foreach (var role in roles)
                    {
                        if (role.Name == "UserManager")
                        {
                            <option value="@role.ID">@role.Name</option>
                        }
                    }
                </select>
            }
            else if(UserIsAdmin)
            {
                <select id="role" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" @bind="user.Role_id">
                    @foreach (var role in roles)
                    {
                        if (role.Name == "Admin")
                        {
                            <option value="@role.ID">@role.Name</option>
                        }
                    }
                </select>
            }
            else
            {
                <select id="role" style="border: 1px solid #ccc; padding: 10px;border-radius: 5px;" class="form-control custom-input" @bind="user.Role_id">
                    @foreach (var role in roles)
                    {
                        if (role.Name == "User")
                        {
                            <option value="@role.ID">@role.Name</option>
                        }
                    }
                </select>
            }
        </div>
       @if (!string.IsNullOrEmpty(errorMessage) && string.IsNullOrEmpty(sucessMessage))
       {
           <div class="alert alert-danger">@errorMessage</div>
       }
       @if (string.IsNullOrEmpty(errorMessage) && !string.IsNullOrEmpty(sucessMessage))
       {
           <div class="alert alert-success">@sucessMessage</div>
       }

        <button type="button" class="btn btn-primary custom-btn" @onclick="UpdateUser">Save</button>
    </form>




@code {
    private UpdateUserModel user = new();
    private List<RoleModel> roles = new();
    private bool UserIsAdmin;
    private bool UserIsUserManager;
    [Parameter]
    public string UserId { get; set; }
    private string errorMessage;
    private string sucessMessage;
    
    protected override async Task OnInitializedAsync()
    {
        await GetUserDetails();
        await GetRoles();        
        await CheckUserRole();
    }

    private async Task GetUserDetails()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/{UserId}");

        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<UpdateUserModel>();
        }
    }

    private async Task UpdateUser()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.PutAsJsonAsync($"http://localhost:5052/api/User/{UserId}", user);

        if (response.IsSuccessStatusCode)
        {
            sucessMessage = "User updated successfully!";
            errorMessage = null;
        }
        else
        {
            errorMessage = "Failed to update user information.";
            sucessMessage = null;
        }
    }
    
    private async Task GetRoles()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/User/GetRoles");

        if (response.IsSuccessStatusCode)
        {
            roles = await response.Content.ReadFromJsonAsync<List<RoleModel>>();
        }
    }
    
    
    private async Task CheckUserRole()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        if (!string.IsNullOrEmpty(token))
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtToken = tokenHandler.ReadJwtToken(token);

            var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            var role = roleClaim?.Value;

            UserIsAdmin = role == "Admin";
            UserIsUserManager = role == "UserManager";
        }
    }
}

<style>
    .form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background-color: #007bff;
        color: #fff;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-primary:active {
        background-color: #004080;
    }

    .btn-primary:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
    }

    .error-message {
        color: red;
    }
</style>
