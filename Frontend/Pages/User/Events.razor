@page "/Events"
@using Frontend.Models.Event
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.Text
@using Frontend.Models.User
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<style>
    .event-table {
        width: 100%;
        border-collapse: collapse;
    }

    .event-table thead tr {
        background-color: #e6dbb9;
    }

    .event-table th,
    .event-table td {
        padding: 10px;
        text-align: left;
    }

    .event-table th:last-child,
    .event-table td:last-child {
        text-align: center;
    }

    .event-table tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .event-table tbody tr:hover {
        background-color: #e0e0e0;
    }

    .event-button {
        background-color: #007bff;
        color: white;
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .event-button:hover {
        background-color: #0056b3;
    }
</style>

<h3>Events</h3>

<div class="form-group">
    <label for="searchByName">Search by Name:</label>
    <select id="searchByName" class="form-control" @bind="@searchByName">
        <option value="">All</option>
        @foreach (var eventName in eventNames)
        {
            <option value="@eventName">@eventName</option>
        }
    </select>
</div>

<div class="form-group">
    <label for="searchByCategory">Search by Category:</label>
    <select id="searchByCategory" class="form-control" @bind="@searchByCategory">
        <option value="">All</option>
        @foreach (var category in categories)
        {
            <option value="@category">@category</option>
        }
    </select>
</div>

<div class="form-group">
    <button style="margin-top: 7px; margin-bottom: 7px" class="btn btn-primary" @onclick="SearchEvents">Search</button>
</div>

@if (filteredEvents != null && filteredEvents.Count > 0)
{
    <table class="event-table">
        <thead>
        <tr>
            <th>Organizer Name</th>
            <th>Name</th>
            <th>Date/Time</th>
            <th>Localization</th>
            <th>Description</th>
            <th>Capacity</th>
            <th>Category</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var evt in filteredEvents)
        {
            <tr>
                <td>@evt.organizer.Name</td>
                <td>@evt.Name</td>
                <td>@evt.Date_Hour</td>
                <td>@evt.Localization</td>
                <td>@evt.Description</td>
                <td>@evt.Capacity</td>
                <td>@evt.Category.Name</td>
                <td>
                    <button class="event-button" @onclick="() => OpenEventDetails(evt.ID)">Inscrever</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No events available.</p>
}
@code {
    private List<EventModel> events;
    private List<EventModel> filteredEvents;
    private string searchByName;
    private string searchByCategory;
    private List<string> eventNames = new List<string>();
    private List<string> categories = new List<string>();
    private string token;
    private string userEmail;
    private Guid userId;


    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("token");

    //Descodificar o token e obter a informação do utilizador
        var tokenHandler = new JwtSecurityTokenHandler();
        var decodedToken = tokenHandler.ReadJwtToken(token);

    // Extrai o email do utilizador
        userEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

    // Obter o ID do utilizador através do email
        userId = await GetUserIdByEmail(userEmail);
        await ListEvents(userId);
      
        await LoadData();
        
    }

    private async Task LoadData()
    {
        //await ListEvents();
        PopulateDropdowns();
        FilterEvents();
    }

    private async Task<Guid> GetUserIdByEmail(string email)
    {
        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/GetUserByEmail/{email}");

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<UserModel>();
            if (user != null)
            {
                return user.ID;
            }
        }

        return Guid.Empty;
    }
    
    private async Task ListEvents(Guid idUser)
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/Event");

        if (response.IsSuccessStatusCode)
        {
            var allEvents = await response.Content.ReadFromJsonAsync<List<EventModel>>();
            events = allEvents.Where(evt => evt.organizer.ID != idUser).ToList();
        }
    }

    private void PopulateDropdowns()
    {
        eventNames = events.Select(e => e.Name).Distinct().ToList();
        categories = events.Select(e => e.Category.Name).Distinct().ToList();
    }

    private void OpenEventDetails(Guid eventId)
    {
        var eventDetailsUrl = $"/EventsTicketDetails/{eventId}";

        // Redireciona para a nova tela, permanecendo no mesmo separador do navegador
        navigationManager.NavigateTo(eventDetailsUrl);
    }

    private void FilterEvents()
    {
        filteredEvents = events;

        if (!string.IsNullOrEmpty(searchByName))
        {
            filteredEvents = filteredEvents.Where(e => e.Name == searchByName).ToList();
        }

        if (!string.IsNullOrEmpty(searchByCategory))
        {
            filteredEvents = filteredEvents.Where(e => e.Category.Name == searchByCategory).ToList();
        }
    }

    private void SearchEvents()
    {
        FilterEvents();
    }
}