@page "/Events"
@using Frontend.Models.Event
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<h3>Events</h3>

<div class="form-group">
    <label for="searchByName">Search by Name:</label>
    <select id="searchByName" class="form-control" @bind="@searchByName">
        <option value="">All</option>
        @foreach (var eventName in eventNames)
        {
            <option value="@eventName">@eventName</option>
        }
    </select>
</div>

<div class="form-group">
    <label for="searchByCategory">Search by Category:</label>
    <select id="searchByCategory" class="form-control" @bind="@searchByCategory">
        <option value="">All</option>
        @foreach (var category in categories)
        {
            <option value="@category">@category</option>
        }
    </select>
</div>

<div class="form-group">
    <button class="btn btn-primary" @onclick="SearchEvents">Search</button>
</div>

@if (filteredEvents != null && filteredEvents.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Organizer Name</th>
                <th>Name</th>
                <th>Date/Time</th>
                <th>Localization</th>
                <th>Description</th>
                <th>Capacity</th>
                <th>Category</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evt in filteredEvents)
            {
                <tr>
                    <td>@evt.organizer.Name</td>
                    <td>@evt.Name</td>
                    <td>@evt.Date_Hour</td>
                    <td>@evt.Localization</td>
                    <td>@evt.Description</td>
                    <td>@evt.Capacity</td>
                    <td>@evt.Category.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => OpenEventDetails(evt.ID)">Inscrever</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No events available.</p>
}

@code {
    private List<EventModel> events;
    private List<EventModel> filteredEvents;
    private string searchByName;
    private string searchByCategory;

    private List<string> eventNames = new List<string>();
    private List<string> categories = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await ListEvents();
        PopulateDropdowns();
        FilterEvents();
    }

    private async Task ListEvents()
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/Event");

        if (response.IsSuccessStatusCode)
        {
            events = await response.Content.ReadFromJsonAsync<List<EventModel>>();
        }
    }

    private void PopulateDropdowns()
    {
        eventNames = events.Select(e => e.Name).Distinct().ToList();
        categories = events.Select(e => e.Category.Name).Distinct().ToList();
    }

    private void OpenEventDetails(Guid eventId)
    {
        var eventDetailsUrl = $"/EventsTicketDetails/{eventId}";

        // Redireciona para a nova tela, permanecendo no mesmo separador do navegador
        navigationManager.NavigateTo(eventDetailsUrl);
    }

    private void FilterEvents()
    {
        filteredEvents = events;

        if (!string.IsNullOrEmpty(searchByName))
        {
            filteredEvents = filteredEvents.Where(e => e.Name == searchByName).ToList();
        }

        if (!string.IsNullOrEmpty(searchByCategory))
        {
            filteredEvents = filteredEvents.Where(e => e.Category.Name == searchByCategory).ToList();
        }
    }

    private void SearchEvents()
    {
        FilterEvents();
    }
}