@page "/CreateEventManagement"
@using Frontend.Models.Event
@using Blazored.LocalStorage
@using Frontend.Models
@using System.Net.Http.Headers
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using Frontend.Models.Event.category
@using Frontend.Models.User
@using Microsoft.AspNetCore.Components
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<h3>Create Event</h3>

<div class="form-group">
    <label for="organizerId">Organizer ID:</label>
    <input id="organizerId" class="form-control" type="text" readonly @bind="newEvent.Organizer_ID" />
</div>

<div class="form-group">
    <label for="name">Name:</label>
    <input id="name" class="form-control" @bind="newEvent.Name" />
</div>

<div class="form-group">
    <label for="date">Date and Time:</label>
    <input id="date" class="form-control" type="datetime-local" @bind="newEvent.Date_Hour" />
</div>

<div class="form-group">
    <label for="localization">Localization:</label>
    <input id="localization" class="form-control" @bind="newEvent.Localization" />
</div>

<div class="form-group">
    <label for="description">Description:</label>
    <textarea id="description" class="form-control" rows="3" @bind="newEvent.Description"></textarea>
</div>

<div class="form-group">
    <label for="capacity">Capacity:</label>
    <input id="capacity" class="form-control" type="number" @bind="newEvent.Capacity" />
</div>

<div class="form-group">
    <label for="category">Category:</label>
    <select id="category" class="form-control" @bind="newEvent.Category_ID">
        @foreach (var category in categories)
        {
            <option value="@category.ID">@category.Name</option>
        }
    </select>
</div>

<div class="form-group">
    <button class="btn btn-primary" @onclick="CreateEventAsync">Create</button>
    <button class="btn btn-primary" @onclick="createCategory">New Category</button>
</div>

@if (showCreateCategoryTable)
{
    <h4>New Category</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <input type="text" @bind="newCategory.Name" />
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="SaveCategory">Save</button>
                    <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private CreateEventModel newEvent = new();
    private List<EventCategoryModel> categories = new();
    private string token;
    private string userEmail;
    private Guid userId;
    private bool showCreateCategoryTable = false;
    private CreateCategoryModel newCategory = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
        token = await localStorage.GetItemAsync<string>("token");

        // Decodificar o token e extrair as informações do utilizador
        var tokenHandler = new JwtSecurityTokenHandler();
        var decodedToken = tokenHandler.ReadJwtToken(token);

        // Extrair o email do utilizador
        userEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

        // Obter o ID do utilizador com base no email
        userId = await GetUserIdByEmail(userEmail);

        // Atribuir o valor do userId ao Organizer_ID
        newEvent.Organizer_ID = userId;
    }

    private async Task<Guid> GetUserIdByEmail(string email)
    {
        var response = await httpClient.GetAsync($"http://localhost:5052/api/User/GetUserByEmail/{email}");

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<UserModel>();
            if (user != null)
            {
                return user.ID;
            }
        }

        return Guid.Empty;
    }

    private async Task GetCategories()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/EventCategory/GetCategories");

        if (response.IsSuccessStatusCode)
        {
            categories = await response.Content.ReadFromJsonAsync<List<EventCategoryModel>>();

            // Verificar se há categorias carregadas com sucesso
            if (categories.Count > 0)
            {
                // Atribuir o valor da primeira categoria como padrão
                newEvent.Category_ID = categories[0].ID;
            }
        }
    }

    private async Task CreateEventAsync()
    {
        newEvent.Date_Hour = DateTime.SpecifyKind(newEvent.Date_Hour, DateTimeKind.Utc);

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/Event/add", newEvent);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("OrganizedEventPage", true);
        }
        else
        {
            Console.WriteLine("Failed to create event.");
        }
    }

    private void createCategory()
    {
        showCreateCategoryTable = true;
    }

    private void CancelEdit()
    {
        showCreateCategoryTable = false;
    }

    private async Task SaveCategory()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        newCategory.ID = Guid.NewGuid();

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/EventCategory/add", newCategory);

        if (response.IsSuccessStatusCode)
        {
            await GetCategories();
            showCreateCategoryTable = false;
        }
        else
        {
            Console.WriteLine("Failed to save category.");
        }
    }
}
