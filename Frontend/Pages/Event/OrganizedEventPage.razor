@page "/OrganizedEventPage"
@using Frontend.Models.Event
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using Frontend.Models.Event.regist
@using Frontend.Models.Event.Ticket
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Organized Event Page</h3>

<button class="btn btn-success" @onclick="CreateEvent">Create Event</button>

@if (events != null && events.Count > 0)
{
    <table class="table">
        <thead>
        <tr style="background: #e6dbb9"> 
            <th>Name</th>
            <th>Date/Time</th>
            <th>Localization</th>
            <th>Description</th>
            <th>Capacity</th>
            <th>Category</th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var evt in events)
        {
            <tr>
                <td>@evt.Name</td>
                <td>@evt.Date_Hour</td>
                <td>@evt.Localization</td>
                <td>@evt.Description</td>
                <td>@evt.Capacity</td>
                <td>@evt.Category.Name</td>
                <td><button class="btn btn-primary" @onclick="() => EditEvent(evt)">Edit</button></td>
                <td><button class="btn btn-danger" @onclick="() => RemoveEvent(evt)">Remove</button></td>
                <td><button class="btn btn-info" @onclick="() => GetTicketsFromEvent(evt.ID)">Tickets</button></td>
                <td><button class="btn btn-dark" @onclick="() => GetEventRegistrations(evt.ID)">Participants</button></td>
            </tr>
        }
        </tbody>
    </table>
}
    @if (showTicketTable)
    {
        <h4>Ticket Information</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Ticket Type</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in eventTickets)
                {
                    <tr>
                        <td>
                            @if (editingTicket != null && editingTicket.ID == ticket.ID)
                            {
                                <input type="text" readonly="readonly" @bind="@editingTicket.TicketType.Name" />
                            }
                            else
                            {
                                @ticket.TicketType.Name
                            }
                        </td>
                        <td>
                            @if (editingTicket != null && editingTicket.ID == ticket.ID)
                            {
                                <input type="number" @bind="@editingTicket.Quantity" />
                            }
                            else
                            {
                                @ticket.Quantity
                            }
                        </td>
                        <td>
                            @if (editingTicket != null && editingTicket.ID == ticket.ID)
                            {
                                <input type="number" step="0.01" @bind="@editingTicket.Price" />
                            }
                            else
                            {
                                @ticket.Price
                            }
                        </td>
                        <td>
                            @if (editingTicket != null && editingTicket.ID == ticket.ID)
                            {
                                <button class="btn btn-primary" @onclick="() => SaveTicket(editingTicket)">Save</button>
                                <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="() => EditTicket(ticket)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => RemoveTicket(ticket)">Remove</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="AddTicket">Add Ticket</button>
        <button class="btn btn-secondary" @onclick="HideTicketTable">Close</button>
    }
   
    @if (showParticipantsTable)
    {
        <h4>Participants Information</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Registration Date</th>
                    <th>Ticket Type</th>
                    <th>State</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var regist in eventRegistrations)
                {
                    <tr>
                        <td>@regist.Participant_Name</td>
                        <td>@regist.Regist_Date</td>
                        <td>@regist.Ticket_Type_Name</td>
                        <td>@regist.State_Name</td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-secondary" @onclick="HideParticipantTable">Close</button>
 
}


@code {
    private List<EventModel> events;
    private List<EventTicketModel> eventTickets;
    private List<EventRegistModel> eventRegistrations;
    private EventModel eventToEdit;
    private EventModel selectedEvent;
    private bool showTicketTable = false;
    private bool showParticipantsTable = false;
    private EventTicketModel editingTicket;
    private Guid selectedRegistrationId;
    private EventRegistModel selectedRegistration;

    protected override async Task OnInitializedAsync()
    {
        await ListOrganizedEvents();
    }

    private async Task ListOrganizedEvents()
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/Event");

        if (response.IsSuccessStatusCode)
        {
            var allEvents = await response.Content.ReadFromJsonAsync<List<EventModel>>();

            // Filter the events where the organizer is the logged-in user
            var userId = await CurrentUserId();
            events = allEvents.Where(evt => evt.Organizer_ID == userId).ToList();
        }
    }
 
    private async Task GetEventRegistrations(Guid eventId)
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/EventRegist/api/EventRegistration/GetAllRegistsOnEvent/{eventId}");

        if (response.IsSuccessStatusCode)
        {
            eventRegistrations = await response.Content.ReadFromJsonAsync<List<EventRegistModel>>();
            showParticipantsTable = true;
        }
    }

    private async Task<Guid> CurrentUserId()
    {
        var token = await localStorage.GetItemAsync<string>("token");

        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var decodedToken = handler.ReadJwtToken(token);
            var userIdClaim = decodedToken.Claims.FirstOrDefault(claim => claim.Type == "sub");

            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
            {
                return userId;
            }
        }

        return Guid.Empty;
    }

    private async Task GetTicketsFromEvent(Guid eventId)
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"http://localhost:5052/api/EventTicket/GetEventTicketsByEvent/{eventId}");

        if (response.IsSuccessStatusCode)
        {
            eventTickets = await response.Content.ReadFromJsonAsync<List<EventTicketModel>>();
            selectedEvent = events.FirstOrDefault(evt => evt.ID == eventId);
            showTicketTable = true;
        }
    }


    private void EditEvent(EventModel evt)
    {
        eventToEdit = evt;
        navigationManager.NavigateTo($"/EditEventManagement/{evt.ID}", true);
    }

    private async Task RemoveEvent(EventModel evt)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove event {evt.Name}?");

        if (confirmed)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.DeleteAsync($"http://localhost:5052/api/Event/{evt.ID}");

            if (response.IsSuccessStatusCode)
            {
                await ListOrganizedEvents();
            }
            else
            {
                Console.WriteLine("Failed to remove event.");
            }
        }
    }

    private void HideTicketTable()
    {
        showTicketTable = false;
    }

    private void HideParticipantTable()
    {
        showParticipantsTable = false;
    }

    private async Task RemoveTicket(EventTicketModel ticket)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this ticket?");

        if (confirmed)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.DeleteAsync($"http://localhost:5052/api/EventTicket/{ticket.ID}");

            if (response.IsSuccessStatusCode)
            {
                await GetTicketsFromEvent(selectedEvent.ID);
            }
            else
            {
                Console.WriteLine("Failed to remove ticket.");
            }
        }
    }

    private void EditTicket(EventTicketModel ticket)
    {
        editingTicket = ticket;
    }

    private async Task SaveTicket(EventTicketModel ticket)
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.PutAsJsonAsync($"http://localhost:5052/api/EventTicket/EditTicket/{ticket.ID}", ticket);

        if (response.IsSuccessStatusCode)
        {
            editingTicket = null;
        }
        else
        {
            Console.WriteLine("Failed to save ticket.");
        }
    }

    private void CancelEdit()
    {
        editingTicket = null;
    }

    private void AddTicket()
    {
        navigationManager.NavigateTo($"CreateEventTicket", true);
    }

    private void CreateEvent()
    {
        navigationManager.NavigateTo("CreateEventManagement", true);
    }
}
