@page "/CreateUserManagement"
@using Frontend.Models.User
@using Blazored.LocalStorage
@using Frontend.Models
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<h3>Create User</h3>

<div class="form-group">
    <label for="name">Name:</label>
    <input id="name" class="form-control" @bind="newUser.Name" />
</div>

<div class="form-group">
    <label for="username">Username:</label>
    <input id="username" class="form-control" @bind="newUser.Username" />
</div>

<div class="form-group">
    <label for="email">Email:</label>
    <input id="email" class="form-control" @bind="newUser.Email" />
</div>

<div class="form-group">
    <label for="phone">Phone:</label>
    <input id="phone" class="form-control" @bind="newUser.Phone" />
</div>

<div class="form-group">
    <label for="password">Password:</label>
    <input id="password" class="form-control" type="password" @bind="newUser.Password" />
</div>

<div class="form-group">
    <label for="role">Role:</label>
    <select id="role" class="form-control" @bind="newUser.Role_id">
        @foreach (var role in roles)
        {
            <option value="@role.ID">@role.Name</option>
        }
    </select>
</div>

<div class="form-group">
    <button class="btn btn-primary" @onclick="CreateUserAsync">Create</button>
</div>

@code {
    private CreateUserModel newUser = new CreateUserModel();
    private List<RoleModel> roles;

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
    }

    private async Task GetRoles()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/User/GetRoles");

        if (response.IsSuccessStatusCode)
        {
            roles = await response.Content.ReadFromJsonAsync<List<RoleModel>>();
        }
    }

    private async Task CreateUserAsync()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/User", newUser);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/UserManagement", true);
        }
        else
        {
            Console.WriteLine("Failed to create user.");
        }
    }
}
