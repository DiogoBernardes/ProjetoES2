@page "/UserManagement"
@using Frontend.Models.User
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<style>
     .user-table {
         width: 100%;
         border-collapse: collapse;
     }
 
     .user-table thead tr {
         background-color: #e6dbb9;
     }
 
     .user-table th,
     .user-table td {
         padding: 10px;
         text-align: left;
     }
 
     .user-table th:last-child,
     .user-table td:last-child {
         text-align: center;
     }
 
     .user-table tbody tr:nth-child(even) {
         background-color: #f2f2f2;
     }
 
     .user-table tbody tr:hover {
         background-color: #e0e0e0;
     }
 
     .edit-button {
         background-color: #007bff;
         color: white;
         padding: 8px 16px;
         border: none;
         border-radius: 4px;
         cursor: pointer;
         transition: background-color 0.3s ease;
     }
 
     .edit-button:hover {
         background-color: #0056b3;
     }
 
     .remove-button {
         background-color: #dc3545;
         color: white;
         padding: 8px 16px;
         border: none;
         border-radius: 4px;
         cursor: pointer;
         transition: background-color 0.3s ease;
     }
 
     .remove-button:hover {
         background-color: #b02a37;
     }
 </style>
 
 
 @if (users != null)
 {
     <table class="user-table">
         <thead>
         <tr>
             <th>ID</th>
             <th>Name</th>
             <th>Username</th>
             <th>Email</th>
             <th>Phone</th>
             <th></th>
             <th></th>
         </tr>
         </thead>
         <tbody>
         @foreach (var user in users)
         {
             <tr>
                 <td>@user.ID</td>
                 <td>@user.Name</td>
                 <td>@user.Username</td>
                 <td>@user.Email</td>
                 <td>@user.Phone</td>
                 <td><button class="edit-button" @onclick="() => EditUser(user)">Edit</button></td>
                 <td><button class="remove-button" @onclick="() => RemoveUser(user)">Remove</button></td>
             </tr>
         }
         </tbody>
     </table>
 }
 else
 {
     <p>Error fetching users.</p>
 }
 
 <button class="btn btn-success" @onclick="CreateUser">Create User</button>
@code {
    private List<UserModel> users;
    private UserModel userToEdit;

    protected override async Task OnInitializedAsync()
    {
        await ListAllUsers();
    }

    private async Task ListAllUsers()
    {
        var token = await localStorage.GetItemAsync<string>("token");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("http://localhost:5052/api/User/GetAll");

        if (response.IsSuccessStatusCode)
        {
            users = await response.Content.ReadFromJsonAsync<List<UserModel>>();
        }
    }

    private void EditUser(UserModel user)
    {
        userToEdit = user;
        navigationManager.NavigateTo($"/EditUserManagement/{user.ID}", true);
    }

    private async Task RemoveUser(UserModel user)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove user {user.Name}?");

        if (confirmed)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.DeleteAsync($"http://localhost:5052/api/User/{user.ID}");

            if (response.IsSuccessStatusCode)
            {
                await ListAllUsers();
            }
            else
            {
                Console.WriteLine("Failed to remove user.");
            }
        }
    }

    private void CreateUser()
    {
        navigationManager.NavigateTo("CreateUserManagement", true);
    }
}
