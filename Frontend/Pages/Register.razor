@page "/Register"
@using Blazored.LocalStorage
@using Frontend.Models.User
@using System.Net.Http.Json

@inject ILocalStorageService localStorage
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Register</h3>

<div class="register-container">
    <div class="form-group">
        <label for="name">Name:</label>
        <input id="name" class="form-control" @bind="registerModel.Name" />
    </div>

    <div class="form-group">
        <label for="username">Username:</label>
        <input id="username" class="form-control" @bind="registerModel.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input id="password" class="form-control" type="password" @bind="registerModel.Password" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <input id="email" class="form-control" type="email" @bind="registerModel.Email" />
    </div>

    <div class="form-group">
        <label for="phone">Phone:</label>
        <input id="phone" class="form-control" @bind="registerModel.Phone" />
    </div>

    <div class="form-group">
        <button class="btn btn-primary" @onclick="HandleRegisterAsync">Register</button>
    </div>

    <div class="form-group">
        <p>Already have an account? <a href="/">Login here</a></p>
    </div>
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</div>

@code {
    private CreateUserModel registerModel = new CreateUserModel();
    private string ErrorMessage;

    private async Task HandleRegisterAsync()
    {
        registerModel.Role_id = new Guid("b4b09d22-77c4-4587-bf32-35620f1cc320"); // Set the role_id to "USER"

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/User/registration", registerModel);

        if (response.IsSuccessStatusCode)
        {
            var createdUser = await response.Content.ReadFromJsonAsync<UserModel>();

            if (createdUser != null)
            {
                navigationManager.NavigateTo("/"); // Redirect to the login page after successful registration
            }
            else
            {
                ErrorMessage = "Failed to retrieve created user from the response.";
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<Dictionary<string, string[]>>();

            if (errorResponse != null && errorResponse.ContainsKey("errors"))
            {
                var errors = errorResponse["errors"];
                ErrorMessage = string.Join(". ", errors);
            }
            else
            {
                ErrorMessage = "Registration failed: Bad Request";
            }
        }
        else
        {
            ErrorMessage = "Registration failed: " + response.StatusCode;
        }
    }
}
